# - * - codering: utf-8 - * -

import  tijd

TYPE_MODE_TEST  =  'TEST'
TYPE_MODE_DEBUG  =  'DEBUG'
TYPE_MODE_GAME  =  'SPEL'

CONFIG_POOL  = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ,0]
CONFIG_NUM_DIGIT  =  3
CONFIG_MODE  =  TYPE_MODE_GAME

POTEN  = [] # POTENTIEEL VAN STAKING, BALPAREN
#POTEN = [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (2, 0 ), (2, 1), (3, 0)]
voor  s  binnen  bereik ( CONFIG_NUM_DIGIT  +  1 ):
    voor  b  in  bereik ( CONFIG_NUM_DIGIT  +  1 ):
        als  s  +  b  <=  CONFIG_NUM_DIGIT :
            POTEN . toevoegen (( s , b ))
WIN_KEY  =  '% dS0B' % ( CONFIG_NUM_DIGIT )

def  is_allowed_number ( nummer ):
    _nummer  =  str ( nummer )
    retourneer  len ( _nummer ) ==  CONFIG_NUM_DIGIT  en \
           len ( set ( _nummer )) ==  CONFIG_NUM_DIGIT  en \
           all ( int ( i ) in  CONFIG_POOL  voor  i  in  _nummer )

SET_POOL  =  ingesteld ( CONFIG_POOL )
ALL_NUMBERS  = [ getal  voor  getal  in  bereik ( 10  ** ( CONFIG_NUM_DIGIT  -  1 ), 10  **  CONFIG_NUM_DIGIT ) als  is_ toegestaan_getal ( getal )]

TEST_ACCELERATION_INDEX  = {}
def  get_to_index ( SB_history ):
    a  =  TEST_ACCELERATION_INDEX
    voor  sleutel  in  SB_history :
        als  sleutel  niet  in  een :
            retourneren  Geen
        a  =  a [ sleutel ]
    retourneer  een [ 'Q' ]

def  set_to_index ( SB_history , new_question ):
    a  =  TEST_ACCELERATION_INDEX
    voor  sleutel  in  SB_history [: - 1 ]:
        a  =  a [ sleutel ]
    a [ SB_history [ - 1 ]] = { 'Q' : new_question }

def  calc_s_and_b ( q , a ):
    _q  =  str ( q )
    _a  =  str ( a )
    s  =  0
    b  =  0
    voor  ik  binnen  bereik ( CONFIG_NUM_DIGIT ):
        if  _q [ i ] ==  _a [ i ]:
            s  + =  1
        elif  _q [ i ] in  _a :
            b  + =  1
    retourneer  s , b

def  calc_pool ( q , s , b , pool ):
    resultaat  =  0
    _q  =  str ( q )
    voor  een  in  het zwembad :
        _s , _b  =  calc_s_and_b ( _q , a )
        als  s  ==  _s  en  b  ==  _b :
            resultaat  + =  1
     resultaat retourneren

def  update_pool ( q , s , b , pool ):
    resultaat  = []
    _q  =  str ( q )
    voor  een  in  het zwembad :
        _s , _b  =  calc_s_and_b ( _q , a )
        als  s  ==  _s  en  b  ==  _b :
            resultaat . toevoegen ( a )
     resultaat retourneren

def  calc_best_question ( a_pool , geschiedenis ):
    q_pool  = []
    before_count  =  len ( a_pool )
    if  before_count  ==  1 :
        retourneer  a_pool [ 0 ], True
    before_count  =  float ( before_count )

    duplicaten  =  set ()
    voor  q  in  ALL_NUMBERS :
        q_str  =  str ( q )
        voor  i  in  CONFIG_POOL :
            als  ik  niet  in de  geschiedenis ben :
                q_str  =  q_str . vervangen ( str ( i ), 'X' )
        als  q_str  in  duplicaten :
            doorgaan met
        duplicaten . toevoegen ( q_str )
        q_pool . toevoegen ( q )

    beste  =  0,0
    recom  =  Geen
    _q  =  0
    dups  = []

    if  CONFIG_MODE  ==  TYPE_MODE_DEBUG :
        print  'A Pool:% s' % ( a_pool )
    voor  q  in  q_pool :
        result  = {}
        cache  = {}
        totaal  =  0,0
        voor  s , b  in  POTEN :
            rest_count  =  calc_pool ( q , s , b , a_pool )
            if  stay_count  ==  0 :
                doorgaan met
            total  + =  rest_count
            key  =  '% dS% dB' % ( s , b )
            cache [ key ] =  rest_count
            resultaat [ key ] =  rest_count

        is_duplicate  =  False
        voor  dup  in  dups :
            als  dup . keys () ==  cache . toetsen ():
                check  = []
                voor  sleutel  in  cache :
                    check . toevoegen ( cache [ key ] ==  dup [ key ])
                als  alles ( vink aan ):
                    is_duplicate  =  Waar
                    breken

        if  is_duplicate :
            doorgaan met
        dups . toevoegen ( cache )

        if  CONFIG_MODE  ==  TYPE_MODE_DEBUG :
            print  'Antwoord:% s' % ( q )
        score  =  0,0
        voor  sleutel  in  gesorteerd ( result . keys (), key = lambda  x : result [ x ], reverse = True ):
            waarschijnlijkheid  =  resultaat [ key ] /  before_count
            if  key  ==  WIN_KEY :
                score  + =  kans  * ( before_count  -  resultaat [ key ] +  1 ) /  before_count
            anders :
                score  + =  kans  * ( before_count  -  resultaat [ key ]) /  before_count
            if  CONFIG_MODE  ==  TYPE_MODE_DEBUG :
                print  '% s: Count:% s, Probability:% .2f %%' % ( key , result [ key ], probability  *  100 )
        score  * =  10
        if  CONFIG_MODE  ==  TYPE_MODE_DEBUG :
            print  'Score:% .2f' % ( score )
        indien het  beste  <  score :
            best  =  score
            recom  =  resultaat
            _q  =  q

    assert  Recom  is  niet  None

    if  CONFIG_MODE  ==  TYPE_MODE_DEBUG  of  CONFIG_MODE  ==  TYPE_MODE_GAME :
        print  'Aanbevolen antwoord:% d' % ( _q )
    result  =  recom
    score  =  0,0
    voor  sleutel  in  gesorteerd ( result . keys (), key = lambda  x : result [ x ], reverse = True ):
        waarschijnlijkheid  =  resultaat [ key ] /  before_count
        if  key  ==  WIN_KEY :
            score  + =  kans  * ( before_count  -  resultaat [ key ] +  1 ) /  before_count
        anders :
            score  + =  kans  * ( before_count  -  resultaat [ key ]) /  before_count
        if  CONFIG_MODE  ==  TYPE_MODE_DEBUG  of  CONFIG_MODE  ==  TYPE_MODE_GAME :
            print  '% s: Count:% s, Probability:% .2f %%' % ( key , result [ key ], probability  *  100 )
    score  * =  10
    if  CONFIG_MODE  ==  TYPE_MODE_DEBUG  of  CONFIG_MODE  ==  TYPE_MODE_GAME :
        print  'Score:% .2f' % ( score )
    return  _q , len ( resultaat ) <=  1  # FINISH

def  test_all_numbers ():
    antwoorden  =  ALL_NUMBERS
    all_count  =  0
    finish_count  =  0
    len_answers  =  len ( ALL_NUMBERS )
    analyse  = {}
    nu  =  tijd . tijd ()
    TEST_ACCELERATION_INDEX  = {}
    voor  antwoord  in  antwoorden :
        pool  =  ALL_NUMBERS
        history  =  set ()
        SB_history  = [ 'FIRST' ]
        count  =  0
        terwijl  waar :
            tel  + =  1
            all_count  + =  1
            q  =  get_to_index ( SB_history )
            Als  q  is  None :
                q , _  =  calc_best_question ( pool , geschiedenis )
                set_to_index ( SB_history , q )

            s , b  =  calc_s_and_b ( q , antwoord )
            if  s  ==  CONFIG_NUM_DIGIT :
                als  tellen  niet  in  analyse :
                    analyseer [ count ] =  0
                analyseer [ aantal ] + =  1
                finish_count  + =  1
                als  finish_count  %  50  ==  0 :
                    print  '% d /% d Finish' % ( finish_count , len_answers )
                breken

            SB_history . toevoegen ( '% dS% dB' % ( s , b ))

            pool  =  update_pool ( q , s , b , pool )
            voor  ik  binnen  bereik ( CONFIG_NUM_DIGIT ):
                geschiedenis . toevoegen ( q  %  10 )
                q  / =  10
    print  'PTIME:% d' % ( time . time () -  nu )
    print  'NUMBERS:% d' % ( len ( ALL_NUMBERS ))
    print  'AVERAGE:% .2f' % ( float ( all_count ) /  len ( ALL_NUMBERS ))
    print  'COUNT ANALYSE:% s' % ( analyse )

def  interactive_game ():
    pool  =  ALL_NUMBERS
    history  =  set ()
    count  =  0
    terwijl  waar :
        q , is_finished  =  calc_best_question ( pool , geschiedenis )
        if  is_finished :
            # NIEUW SPEL STARTEN
            print  'Game Finished! Antwoord:% d, aantal vragen:% d ' % ( q , count )
            afdrukken  ''
            print  'Press Enter to New Game!'
            raw_input ()
            pool  =  ALL_NUMBERS
            geschiedenis . duidelijk ()
            count  =  0
            doorgaan met
        tel  + =  1
        afdrukken  ''
        s  =  invoer ( 'S:' )
        b  =  invoer ( 'B:' )
        afdrukken  ''
        pool  =  update_pool ( q , s , b , pool )

        # GESCHIEDENIS-UPDATE (GEBRUIKT NUMMER)
        voor  ik  binnen  bereik ( CONFIG_NUM_DIGIT ):
            geschiedenis . toevoegen ( q  %  10 )
            q  / =  10

if  __name__  ==  "__main__" :
    print  u "" "'Oplosser voor stieren en koeien
Auteur: blackcat610@github.com (메이플 스토리 아케인 서버 뉴 메타 소프트)
Datum: 2017.10.15
​
    if  CONFIG_MODE  ==  TYPE_MODE_TEST :
        test_all_numbers ()
    anders :
        interactief_spel ()

# EOF
